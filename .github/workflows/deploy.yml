# deploy
name: Deploy to GCP VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      N8N_PORT: ${{ secrets.N8N_PORT }}
      N8N_BASIC_AUTH_ACTIVE: ${{ secrets.N8N_BASIC_AUTH_ACTIVE }}
      N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER }}
      N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
      NODE_FUNCTION_ALLOW_EXTERNAL: ${{ secrets.NODE_FUNCTION_ALLOW_EXTERNAL }}
      N8N_HOST: ${{ secrets.N8N_HOST }}
      N8N_PROTOCOL: ${{ secrets.N8N_PROTOCOL }}
      WEBHOOK_TUNNEL_URL: ${{ secrets.WEBHOOK_TUNNEL_URL }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: ${{ secrets.N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS }}
      N8N_RUNNERS_ENABLED: ${{ secrets.N8N_RUNNERS_ENABLED }}
      N8N_HIDE_SETUP_PAGE: ${{ secrets.N8N_HIDE_SETUP_PAGE }}
      N8N_VOLUME_PATH: ${{ secrets.N8N_VOLUME_PATH }}

    steps:
      - name: Connect and deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          script: |
            echo "üì¶ Desplegando en la VM..."

            cd ~/n8n

            # Hacer backup de la base de datos si existe
            echo "üíæ Verificando base de datos..."
            if [ -f "n8n_data/database.sqlite" ]; then
              echo "üíæ Haciendo backup de la base de datos..."
              cp n8n_data/database.sqlite n8n_data/database.sqlite.backup
            fi

            # Reset cambios locales
            git reset --hard
            git clean -fd
            git pull https://github.com/gcaramesfleetsgo/automation-n8n.git main

            # Restaurar base de datos si existe el backup
            if [ -f "n8n_data/database.sqlite.backup" ]; then
              echo "üíæ Restaurando base de datos..."
              mv n8n_data/database.sqlite.backup n8n_data/database.sqlite
            fi

            echo "üîê Generando archivo .env..."
            cat << 'EOL' > .env
N8N_PORT=${N8N_PORT}
N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
NODE_FUNCTION_ALLOW_EXTERNAL=${NODE_FUNCTION_ALLOW_EXTERNAL}
N8N_HOST=${N8N_HOST}
N8N_PROTOCOL=${N8N_PROTOCOL}
WEBHOOK_TUNNEL_URL=${WEBHOOK_TUNNEL_URL}
WEBHOOK_URL=${WEBHOOK_URL}
N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
N8N_HIDE_SETUP_PAGE=${N8N_HIDE_SETUP_PAGE}
N8N_VOLUME_PATH=${N8N_VOLUME_PATH}
EOL

            echo "üöÄ Ejecutando docker-compose..."
            # Asegurarse de que docker-compose est√° instalado
            if ! command -v docker-compose &> /dev/null; then
              echo "Instalando docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Ejecutar comandos de docker-compose
            docker-compose build n8n
            docker-compose pull
            docker-compose down
            docker-compose up -d
